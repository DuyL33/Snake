package com.Snake.app;

import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Application;
import javafx.event.EventHandler;
import javafx.scene.Group;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.canvas.Canvas;
import javafx.scene.canvas.GraphicsContext;
import javafx.scene.image.Image;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.paint.Color;
import javafx.scene.text.Font;
import javafx.stage.Stage;
import javafx.util.Duration;
import javafx.scene.control.Button;
import javafx.scene.layout.StackPane;
import javafx.scene.layout.AnchorPane;
import javafx.animation.AnimationTimer;

import java.awt.Point;
import java.util.ArrayList;
import java.util.List;

public class App extends Application{
    private static final int WIDTH = 800;
    private static final int HEIGHT = 800;
    private static final int ROWS = 20;
    private static final int COLS = ROWS;
    private static final int SQUARE_SIZE = WIDTH/ ROWS;

   private static final String[] FOOD_IMAGE = new String[]{
    "/img/ic_apple.png",
    "/img/ic_berry.png",
    "/img/ic_cherry.png",
    "/img/ic_coconut_.png",
    "/img/ic_orange.png",
    "/img/ic_peach.png",
    "/img/ic_pomegranate.png",
    "/img/ic_tomato.png",
    "/img/ic_watermelon.png"
};



    private static final int RIGHT = 0;
    private static final int LEFT = 1;
    private static final int UP = 2;
    private static final int DOWN = 3;

    private GraphicsContext gc;
    private List<Point> snakeBody = new ArrayList();
    private Point snakeHead;
    private Image foodImage;
    private int foodX;
    private int foodY;
    private boolean gameOver;
    private int currentDirection;
    private int oldDirection;
    private int score = 0;


    private long lastUpdateTime = 0;
    private final double targetFrameRate = 10.0;
    private final double targetFrameTime = 1.0 / targetFrameRate;

    @Override
    public void start(Stage primaryStage){
        try {

            primaryStage.setTitle("Snake");
            StackPane root = new StackPane();
            Canvas canvas = new Canvas(WIDTH,HEIGHT);
            Button switchButton = new Button("Switch");
            Button restartButton = new Button("Restart");
            Scene scene = new Scene(root);
            AnimationTimer animationTimer;

            gc = canvas.getGraphicsContext2D();
            drawBackground(gc);
            root.getChildren().addAll(canvas, switchButton);
            primaryStage.setScene(scene);
            primaryStage.show();

            animationTimer = new AnimationTimer() {
                
                public void handle(long now){
                    double elapsedSeconds = (now - lastUpdateTime) / 1_000_000_000.0;
                    if (elapsedSeconds >= targetFrameTime) {
                        run(gc);
                        // Update last update time
                        lastUpdateTime = now;
                    }
                }
            };

            scene.setOnKeyPressed(new EventHandler<KeyEvent>(){
                @Override
                public void handle(KeyEvent event){
                    KeyCode code = event.getCode();
                    if(code == KeyCode.RIGHT || code == KeyCode.D){
                        if(oldDirection != LEFT){
                            System.out.print("d");
                            currentDirection = RIGHT;
                        }
                    }
                    else if(code == KeyCode.LEFT || code == KeyCode.A){

                        if(oldDirection != RIGHT){
                            System.out.print("a");
                            currentDirection = LEFT;
                        }
                    }
                    else if(code == KeyCode.UP || code == KeyCode.W){
                        if(oldDirection != DOWN){
                            System.out.print("w");
                            currentDirection = UP;
                        }
                    }
                    else if(code == KeyCode.DOWN || code == KeyCode.S){
                        if(oldDirection != UP){
                            System.out.print("s");
                            currentDirection = DOWN;
                        }
                    }
                    else{
                        System.out.print("nothing");
                    }
                }
            });

            for (int i = 0; i < 3; i++){
                snakeBody.add(new Point(5, ROWS/2));
            }


            generateFood();

            snakeHead = snakeBody.get(0);
            switchButton.setOnAction(e -> {
                root.getChildren().remove(switchButton);
                primaryStage.setScene(scene);
                animationTimer.start();

            });
            if(gameOver == true){
                root.getChildren().remove(canvas);
            }
            restartButton.setOnAction(e ->{
                root.getChildren().add(switchButton);
                resetGame();
            });

        } catch (Exception e) {
            Throwable cause = e.getCause();
            if (cause != null) {
                cause.printStackTrace();
            } else {
                e.printStackTrace();
            }
        }
        
    }
    private void run(GraphicsContext gc){
        if(gameOver == true){
            gc.setFill(Color.RED);
            gc.setFont(new Font("Digital-7",70));
            gc.fillText("Game Over", WIDTH/3.5, HEIGHT/2);
            resetGame();
            return;
        }
        drawBackground(gc);
        drawFood(gc);
        drawSnake(gc);
        drawScore();

        for (int i = snakeBody.size() -1; i>=1;i--){
            snakeBody.get(i).x = snakeBody.get(i-1).x;
            snakeBody.get(i).y = snakeBody.get(i-1).y;  
        }
        this.oldDirection = this.currentDirection;
        switch (currentDirection){
            case RIGHT:
                moveRight();
                break;
            case LEFT:
                moveLeft();
                break;
            case UP:
                moveUP();
                break;
            case DOWN:
                moveDown();
                break;
        }
        gameOver();
        eatFood();
    }
    private void drawBackground(GraphicsContext gc){
        for(int i = 0; i<ROWS;i++){
            for(int j = 0; j<ROWS;j++){
                if((i+j)%2 == 0){
                    gc.setFill(Color.web("016064"));
                }
                else{
                    gc.setFill(Color.web("022D36"));
                }
                gc.fillRect(i*SQUARE_SIZE, j*SQUARE_SIZE,SQUARE_SIZE,SQUARE_SIZE);
            }

        }
    }
    
    private void generateFood(){
        start:
        while(true){
            foodX = (int)(Math.random()* ROWS);
            foodY = (int)(Math.random()* COLS);
            for(Point snake: snakeBody){
                if(snake.getX() == foodX && snake.getY() == foodY){
                    continue start;
                }
            }
            foodImage = new Image(FOOD_IMAGE[(int)(Math.random() * FOOD_IMAGE.length)]);
            break;

        }
    }
    private void drawFood(GraphicsContext gc){
        gc.drawImage(foodImage, foodX * SQUARE_SIZE, foodY*SQUARE_SIZE, SQUARE_SIZE,SQUARE_SIZE);
    }
    private void drawSnake(GraphicsContext gc) {
        gc.setFill(Color.web("FFF200"));
        
        gc.fillRoundRect(snakeHead.getX() * SQUARE_SIZE, snakeHead.getY() * SQUARE_SIZE, SQUARE_SIZE - 1, SQUARE_SIZE - 1, 35, 35);

        for (int i = 1; i < snakeBody.size(); i++) {
            gc.fillRoundRect(snakeBody.get(i).getX() * SQUARE_SIZE, snakeBody.get(i).getY() * SQUARE_SIZE, SQUARE_SIZE - 1,
                    SQUARE_SIZE - 1, 20, 20);
        }
        
    }


    private void moveRight(){
        snakeHead.x++;
    }
    private void moveLeft(){
        snakeHead.x--;
    }

    private void moveUP(){
        snakeHead.y--;
    }
    private void moveDown(){
        snakeHead.y++;
    }

    public void gameOver(){
        if(snakeHead.x < 0 || snakeHead.y < 0 || snakeHead.x *SQUARE_SIZE >= WIDTH || snakeHead.y * SQUARE_SIZE >= HEIGHT){
            gameOver = true;
            System.out.print("HIT Wall");
        }
        for (int i = 1 ; i < snakeBody.size();i++){
            if(snakeHead.x ==  snakeBody.get(i).getX() && snakeHead.getY() == snakeBody.get(i).getY()){
                gameOver = true;
                System.out.print("HIT BODY");
                break;
            }
        }
    }

    private void eatFood(){
        if (snakeHead.getX() == foodX && snakeHead.getY() == foodY){
            snakeBody.add(new Point(-1,-1));
            generateFood();
            score +=1;
        }
    }

    private void drawScore(){
        gc.setFill(Color.YELLOW);
        gc.setFont(new Font("Digital-7",35));
        gc.fillText("Score: " + score, 10,35);

    }
    private void resetGame() {
        snakeBody.clear();
        for (int i = 0; i < 3; i++) {
            snakeBody.add(new Point(5, ROWS / 2));
        }
        snakeHead = snakeBody.get(0);
        generateFood();
        currentDirection = RIGHT;
        gameOver = false;
        score = 0;
    }
    public static void main(String[] args){
        launch(args);

    }
}